<?xml version="1.0" encoding="UTF-8" ?>

<!--
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~       http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.camunda.bpm.engine.impl.persistence.entity.TaskReportResultEntity">

  <resultMap id="historicTaskReportResultMap" type="org.camunda.bpm.engine.impl.persistence.entity.TaskReportResultEntity">
    <result property="definition" column="DEF_" jdbcType="VARCHAR" />
    <result property="count" column="COUNT_" jdbcType="BIGINT" />
  </resultMap>

  <select id="selectHistoricTaskInstanceCountByTaskDefKeyReport" parameterType="org.camunda.bpm.engine.impl.HistoricTaskInstanceReportImpl" resultMap="historicTaskReportResultMap">
    SELECT
      COUNT(DISTINCT(HTI.ID_)) AS COUNT_,
     HTI.TASK_DEF_KEY_ AS DEF_

    <include refid="selectHistoricTaskInstancesForReportByCriteria" />

    GROUP BY
      HTI.TASK_DEF_KEY_
    ORDER BY
      HTI.TASK_DEF_KEY_ ASC
  </select>

  <select id="selectHistoricTaskInstanceCountByProcDefKeyReport" parameterType="org.camunda.bpm.engine.impl.HistoricTaskInstanceReportImpl" resultMap="historicTaskReportResultMap">
    SELECT
      COUNT(DISTINCT(HTI.ID_)) AS COUNT_,
     HTI.PROC_DEF_KEY_ AS DEF_

    <include refid="selectHistoricTaskInstancesForReportByCriteria" />

    GROUP BY
      HTI.PROC_DEF_KEY_
    ORDER BY
      HTI.PROC_DEF_KEY_ ASC
  </select>

  <sql id="selectHistoricTaskInstancesForReportByCriteria">
    FROM
    ${prefix}ACT_HI_TASKINST HTI
    <where>
      HTI.END_TIME_ IS NOT NULL

      <if test="completedBefore != null">
        AND HTI.END_TIME_ &lt;= #{completedBefore}
      </if>
      <if test="completedAfter != null">
        AND HTI.END_TIME_ &gt;= #{completedAfter}
      </if>

      <bind name="columnPrefix" value="'HTI.'"/>
      <include refid="org.camunda.bpm.engine.impl.persistence.entity.TenantEntity.queryTenantCheckWithPrefix" />
    </where>
  </sql>

  <!-- DURATION REPORT -->

  <select id="selectHistoricTaskInstanceDurationReport" parameterType="org.camunda.bpm.engine.impl.HistoricTaskInstanceReportImpl" resultMap="org.camunda.bpm.engine.impl.persistence.entity.ReportResultEntity.durationReportResultMap">
    SELECT
      MIN(RES.DURATION_) AS MIN_, MAX(RES.DURATION_) AS MAX_, AVG(RES.DURATION_) AS AVG_, RES.PERIOD_, '${reportPeriodUnitName}' AS PERIOD_UNIT_
    FROM
      (
        SELECT
          ${datepart1}<include refid="org.camunda.bpm.engine.impl.persistence.entity.ReportResultEntity.periodUnitFunction"/>${datepart2}HTI.END_TIME_${datepart3} AS PERIOD_, HTI.DURATION_
          <include refid="selectHistoricTaskInstancesByCriteria"/>
      ) RES
    GROUP BY
      PERIOD_
  </select>

  <select id="selectHistoricTaskInstanceDurationReport_oracle" parameterType="org.camunda.bpm.engine.impl.HistoricTaskInstanceReportImpl" resultMap="org.camunda.bpm.engine.impl.persistence.entity.ReportResultEntity.durationReportResultMap">
    SELECT
      MIN(RES.DURATION_) AS MIN_, MAX(RES.DURATION_) AS MAX_, AVG(RES.DURATION_) AS AVG_, RES.PERIOD_, '${reportPeriodUnitName}' AS PERIOD_UNIT_
    FROM
      (
        SELECT
          ${datepart1}HTI.END_TIME_${datepart2}<include refid="org.camunda.bpm.engine.impl.persistence.entity.ReportResultEntity.periodUnitFunction"/>${datepart3} AS PERIOD_, HTI.DURATION_
          <include refid="selectHistoricTaskInstancesByCriteria"/>
      ) RES
    GROUP BY
      PERIOD_
  </select>

  <sql id="selectHistoricTaskInstancesByCriteria">
    FROM
      ${prefix}ACT_HI_TASKINST HTI
    <where>
      END_TIME_ IS NOT NULL

      <if test="completedBefore != null">
        AND END_TIME_ &lt;= #{completedBefore}
      </if>
      <if test="completedAfter != null">
        AND END_TIME_ &gt;= #{completedAfter}
      </if>

      <bind name="columnPrefix" value="'HPI.'"/>
      <include refid="org.camunda.bpm.engine.impl.persistence.entity.TenantEntity.queryTenantCheckWithPrefix" />
    </where>
  </sql>
  
</mapper>
